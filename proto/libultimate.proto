// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_multiple_files = true;
option java_package = "io.grpc.examples.libultimate";
option java_outer_classname = "LibUltimateProto";

package libultimate;

// Interface exported by the server.
service LibUltimate {

  // A simple RPC.
  //
  // Obtains the feature at a given position.
  //
  // A feature with an empty name is returned if there's no feature at the given
  // position.
  rpc OperateController(ControlProps) returns (ControlResult) {}


  // A server-to-client streaming RPC.
  //
  // Obtains the Features available within the given Rectangle.  Results are
  // streamed rather than returned at once (e.g. in a response message with a
  // repeated field), as the rectangle may cover a large area and contain a
  // huge number of features.
  rpc GetGameState(GameStateProps) returns (stream GameState) {}

}

// A GameState is a message sent while at a given point.
message GameState {
  // The message to be sent.
  string message = 1;
}

// A GameStateProps is a message sent while at a given point.
message GameStateProps {
  // The message to be sent.
  uint64 hz = 1;
}

// A ControlProps is a message sent while at a given point.
message ControlProps {
  // The message to be sent.
  string message = 1;
}

// A ControlResult is a message sent while at a given point.
message ControlResult {
  // The message to be sent.
  string message = 1;
}
